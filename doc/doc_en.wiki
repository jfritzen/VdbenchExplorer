VdbenchExplorer is a tool for graphical analysis of 
[http://sourceforge.net/projects/vdbench Vdbench] data, written in 
[http://groovy.codehaus.org/ Groovy]. Main goal of this tool is to make 
graphical ad-hoc exploration of data easy by allowing for easy  
reorganisation of the plots.

= Motivation =

I found that repeated command line editing in Gnuplot was too slow and cumbersome to quickly explore multicolumn data. And Gnuplot batch files were too inflexible.  However, gnuplot is still a great tool and has a lot of other advantages.

I've chosen Groovy for this task because it's a compact and neat language like Ruby and at the same time can make direct use of the powerful Java Swing library.

= Installation =

You need

* a Java runtime library, >= J2SE 5.0 should work
* Groovy, >=1.6.x should work
* the (a bit outdated) [http://jplot.sourceforge.net/ JPlot library], version 
1.2.2 from 2003 is current.
* the Groovy script VdbenchExplorer.groovy

= Usage =

Assuming that the JPlot library is in the classpath and that Groovy is in
the shell search path, VdbenchExplorer is started as follows:
<pre>
$ echo $CLASSPATH
/Users/jf/Local/lib/JPlot.jar
$ groovy VdbenchExplorer.groovy
</pre>
There are no command line options yet.

In the main menu you select a vdbench result file ("flatfile.html") with "File->Open". You can add further vdbench result files for comparison later with "File->Add Table". You can remove individual vdbench result files later with "File->Remove Table".

When you have loaded more than one vdbench result file, there is an additional column "Dataset" which serves to distinguish between the several result files.

Starting with Git commit 5ade1ee it is possible to select one or more directories. All "flatfile.html" in these directories will then be imported.

== Working with Columns ==

The table is always sorted along the first column in ascending order. If this column has non-unique values, the concerning rows are also ordered along the second column and so on with further columns if needed.

You can remove a column from the view by right clicking on the column head -> "Remove column".

=== Plotting Columns ===

In order to plot two or more columns you select them for plotting by right clicking on the column head and selecting "Plot". (If the context menu says "Don't Plot" the column is already being plotted.) By selecting "Plot" the column head's color becomes white/black.

The most left plotted column is always the x axis for all plot windows, every other column marked as "Plot" serves as the y axis in its own separate plot window.  I.e. when there are 4 columns marked as "Plot" you have 3 plot windows and the first ("most left") column is the x axis in all 3 of them.

You determine which column becomes the x axis by dragging around the columns (always the left-mosted plotted column). This allows for rapid switching through different dependencies.

Data points always are connected in the same order as they appear in the table. If you want to change the order of the connected points, you have to drag around the column heads. This is intentional behaviour and can be useful, e.g. ordering plotted data points by time while plotting two other columns as x and y.

Starting with Git commit 2c28989 you can protect plot windows against further changes and/or save plot windows as PNG files. Right click on the plot window and choose: * "Save as PNG": suggests a filename and save the plot into a PNG file * "Fix plot": Copy and mark the plot window with a grey background. The plot window is protected against any further changes (column reordering, filtering etc). You can still save the plot window as PNG.

==== Predefined Plots ====

Starting with Git commit 0276b0c: There are three pre-defined plot configurations, accessible via the large buttons at the top of the main window. Since these pre-defined plot configurations rely on certain values for the columns "Threads", "Run" etc, it's best to you the vdbench configuration from below.

==== Auxiliary line ====

Starting with Git commit 556f258: In every newly created plot window there is an auxiliary line, with starting and end coordinates, x and y differences and slope in a separate legend. This initial line extends from the minimal x and y values of the data sets to the maximum values (Xmin, Ymin) -> (Xmax, Ymax), ie left lower corner to right upper. A single click removes the line. Pressing and dragging the left mouse button creates a new auxiliary line between the desired endpoints. Intention of this feature is to help measuring distances and slopes in the plot window.

=== Grouping ===

You can (and probably will) group the data points according to one or more columns. Data points belonging to different groups are then plotted with connected lines, with a different line color for every group. Line colors are automatically chosen by VdbenchExplorer (because I didn't like the idea to have to choose a different color assignment everytime I change the grouping, which is supposed to happen very often when exploring data).  The grouping color is also automatically reflected in the graph's legend. You activate grouping of a column by right clicking on the column head and select "Group by". Grouping is a powerful tool for analysing data.

It is not useful to group by columns which have a high cardinality. I.e.  columns with more than 100 different values are not selectable for grouping.

You can select one or more columns for simultaneous grouping. Please note that by combining mutliple columns for grouping the number of groups may become very large very quickly (up to n^m when n is the number of rows and m the number of grouped columns).

Columns that are use for grouping are marked yellow.

=== Synthetic Columns ===

You can create "synthetic" columns from existing ones by using Groovy expressions. These synthetic columns can be plotted and/or grouped by.

A synthetic column can be created with "Main Menu->Column->Synthetic column".  A window pops up in which you can enter a valid Groovy expression. Columns are referenced by the respective column name in single quotes, e.g.

 'MB/sec'/'threads'

creates a column with throughput over number of threads.

== Working with Rows ==

=== Filtering Rows ===

Row filtering helps to explore data by reducing the number of plotted data points. You create a row filter by right clicking on a table field and selecting "Only this value" or "Exclude this value". Only rows that have exactly this value in this column are then shown ("Only this value") or suppressed ("Exclude this value"). You can exclude more than one value per column.

Columns that have one or more row filters are marked with a read column head.

You can reset all row filters for a column by right clicking on the column head and selecting "Remove row filters for this column".

== Colors of Column Heads ==

Since a column can have multiple statūs simultaneously (grouped by, row filtered, plotted), there needs to be a color scheme for combined statūs.

{| border="1"
 ! Foreground   !! Background   !! Meaning
 |-
 |black         || white        || default
 |-
 |white         || black        || plotted
 |-
 |black         || red          || row filtered
 |-
 |black         || yellow       || grouped by
 |-
 |black         || orange       || row filtered and grouped by
 |-
 |red           || black        || plotted and row filtered
 |-
 |yellow        || black        || plotted and grouped by (not very useful)
 |-
 |orange        || black        || plotted, row filtered and grouped by (not very useful)
|}

= Known bugs and limitations =

* Occasionally dragging & dropping of columns creates Java stack traces, which are harmless however.
* Adding a synthetic column resets the column order to default order, which is inconvenient.

= Feature wish list =

* Zoom into plot windows
* Selected rows in the table should automatically be highlighted in the plot windows also in order to help identifying the data points there.
* Info in the individual plot windows describing the current row filters

= Vdbench Configuration =

This section has nothing to do with VdbenchExplorer. But I like to use the following script for vdbench runs. It is run from the same directory in which vdbench is located. It takes a raw device as argument on the command line.  Before running vdbench the script starts a vi and asks you to describe your setup regarding machine, storage, number of disks etc. Be as detailed as possible. This should help you to remember your setup and understand the context of your vdbench data days or weeks later. The description is saved in the file setup.txt.

<pre>
$ cat vdbench.sh
dev=$1

dir=`echo $dev | tr '/' '_'`.`date +'%Y%m%d%H%M%S'`
mkdir -p results/$dir
echo Describe the lab setup:
vi results/$dir/setup.txt

workfile=/tmp/vdbench.sh.$$
cat <<EOF > $workfile
sd=sd1,lun=$dev,size=10g

wd=sequential_write,sd=sd1,rdpct=0,seekpct=sequential
wd=sequential_read,sd=sd1,rdpct=100,seekpct=sequential
wd=random_write,sd=sd1,rdpct=0,seekpct=random
wd=random_read,sd=sd1,rdpct=100,seekpct=random
wd=random_write_read,sd=sd1,rdpct=50,seekpct=random
rd=random_write_max,wd=random_write,iorate=max,elapsed=10,interval=1,forthreads=(1-16,d),forxfersize=(4k,8k,16k,64k,256k)
rd=random_read_max,wd=random_read,iorate=max,elapsed=10,interval=1,forthreads=(1-16,d),forxfersize=(4k,8k,16k,64k,256k)
rd=sequential_write_max,wd=sequential_write,iorate=max,elapsed=10,interval=1,forthreads=(1-16,d),forxfersize=(4k,8k,16k,64k,256k)
rd=sequential_read_max,wd=sequential_read,iorate=max,elapsed=10,interval=1,forthreads=(1-16,d),forxfersize=(4k,8k,16k,64k,256k)
EOF
./vdbench -o results/$dir -f $workfile
rm -f $workfile
</pre>

