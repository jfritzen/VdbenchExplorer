VdbenchExplorer ist ein in [http://groovy.codehaus.org/ Groovy] geschriebenes Tool zur graphischen Auswertung von einem oder mehreren [[Vdbench]]-Ausgaben. Hauptziele des Tools sind,
sich möglichst schnell einen Überblick über die Abhängigkeiten verschiedener Messwerte untereinander zu verschaffen.

= Installation =

Man benötigt

* Java Runtime-Library, >= J2SE 5.0 sollte gehen
* Groovy, >=1.6.x sollte gehen, gibt's z.B. über [http://www.macports.org/ports.php?by=name&substr=groovy MacPorts] für Mac OS.
* Die (etwas betagte) [http://jplot.sourceforge.net/ JPlot-Library], Version 1.2.2 von 2003 ist die letzte.
* Das Skript VdbenchExplorer.groovy, erhältlich über github

= Benutzung =

Vorausgesetzt, die JPlot-Library ist im Classpath gesetzt und groovy ist im Suchpfad, wird der VdbenchExplorer wie folgt gestartet (Commandline-Options gibts noch nicht):
<pre>
macbook:Temp jf$ echo $CLASSPATH
/Users/jf/Local/lib/JPlot.jar
macbook:Temp jf$ groovy VdbenchExplorer.groovy
</pre>

Es erscheint ein Hauptmenü, in dem man mit "File->Open" ein Vdbench-flatfile.html auswählt. Weitere flatfile.html aus anderen Testläufen kann man dann hinterher mit "File->Add Table" hinzufügen, um mehrere Testläufe miteinander zu vergleichen. Mit "File->Remove Table" können einzelne Testläufe wieder entfernt werden. 

Wenn mehrere Testläufe geladen wurden, existiert eine zusätzliche künstliche Spalte "Dataset", um die verschiedenen Testfläufe unterscheiden zu können.

Ab Git-Commit ccf0dd0 ist es möglich, ein oder mehrere Verzeichnisse auszuwählen. Es werden dann alle in diesen Verzeichnissen findbaren "flatfile.html" importiert. 

== Umgang mit Spalten ==

Die angezeigte Tabelle ist immer entlang der am meisten links stehenden Spalte aufsteigend sortiert. Ist diese Spalte in einigen Zeilen nicht "unique", werden die entsprechenden Zeilen entlang der zweiten Spalte aufsteigen sortiert und (bei verbleibenden Mehrdeutigkeiten in der 2. Spalte) entlang der 3., 4. etc. Möchte man die Tabelle nach einer bestimmten Spalte sortieren, muss man die entsprechende Spalte mit 'Drag&Drop' an die erste Position ziehen.

Spalten können (aus Gründen der Übersichtlichkeit) entfernt werden mittels Kontextmenü auf den Spaltenkopf (Rechtsklick) -> "Remove column".

=== Plotten ===

Das Plotten von Spalten erfolgt ebenfalls über Kontextmenü auf den Spaltenkopf -> "Plot" (bzw. "Don't Plot" falls die Spalte schon zum Plotten ausgewählt ist). Zum Plotten markierte Spalten erhalten einen schwarzen Spaltenkopf. Für einen Plot müssen mindestens zwei Spalten zum Plotten markiert sein. Die erste markierte Spalte ist immer die X-Achse (Abszisse), alle weitere Spalten werden jeweils in einem eigenen Fenster als Y-Achse (Ordinate) gegen die erste markierte Spalte aufgetragen. Vertauscht man die erste markierte Spalte mit einer anderen markierten, wird diese automatisch zur neuen Abszisse, alle Plot-Fenster werden automatisch auf die Abszisse umgestellt. Das ermöglicht ein schnelles Umschalten zum Studium verschiedener möglicher Abhängigkeiten der gemessenen Parameter untereinander.

Ab Git-Commit c851caa ist es möglich, Plots gegen Veränderung zu sichern oder abzuspeichern: Rechte Maustaste auf Plot-Fenster:
* "Save as PNG": Schlägt einen Filenamen vor und speichert das Plot-Fenster in eine PNG-Datei
* "Fix plot": Markiere das aktuelle Plot-Fenster mit grauem Hintergrund. Alle folgenden Änderungen an der Tabelle werden in dem Plot-Fenster nicht dargestellt. Abspeichern des Plot-Fensters ist möglich.

==== Predefined Plots ====

Ab Git-Commit 1267d4a: Im Hauptfenster gibt es drei Schaltflächen mit vorgefertigten Plot-Einstellungen. Die dort definierten Zeilenfilter setzen allerdings bestimmte Werte "Threads" oder "Run" voraus, weshalb nach Möglichkeit das unten aufgeführte Skript zur Messung verwendet werden sollte.

==== Hilfsgerade ====

Ab Git-Commit d2a4ce4: In jedem Plot-Fenster wird eine Hilfsgerade eingzeichnet, mit Angabe von Start- und Endkoordinaten der Gerade, Differenz von End- und Start-Koordinaten (X und Y), sowie Steigung. Die initiale Gerade erstreckt sich von den minimalen X und Y-Werten aller geplotteteten Datensätze (Xmin, Ymin) bis zu den Maximal-Werten (Xmax, Ymax), d.h. linke untere Ecke bis rechte obere. Einfaches Klicken entfernt die Gerade. Durch Drücken der linken Maus-Taste, Ziehen und Loslassen wird eine neue Hilfsgerade zwischen den gewünschten Koordinaten erzeugt. Dieses Feature soll helfen, Teile von Graphen auszumessen.

=== Gruppieren ===

Man kann die angzeigten Datenpunkte anhand der Werte einer weiteren Spalte "gruppieren", d.h. die Punkte werden anhand diese Gruppierungsspalte in mehrere Datensets aufgeteilt und in unterschiedlichen Farben in den jeweiligen Plotfenstern geplottet. Für jeden Datenset wird eine Legende im Plotfenster angzeigt. Das ermöglicht, die Zusammengehörigkeit von Datenpunkten zu visualisieren. Gruppieren erfolgt über das Kontextmenü im Spaltenkopf der Gruppierungsspalte -> "Group By" (bzw. "Don't Group By", falls die Spalte schon Gruppierungsspalte ist).

Es ist nicht möglich (oder sinnvoll) Spalten mit sehr hoher Kardinalität zum Gruppieren zu verwenden: Spalten mit mehr als 100 unterschiedlichen Werten werden nicht zur Gruppierung zugelassen. 

Es kann maximal nur eine Spalte zur Zeit Gruppierungsspalte sein. Es ist aber möglich, nach mehr als einer Spalte gleichzeitig zu gruppieren, indem man die betreffenden Spalten zu einer "synthetischen" Spalte zusammenfasst und nach dieser gruppiert, s.u. Ab Git-Commit 8a4389c ist es auch möglich, mehrere Spalten zur Gruppierung auszuwählen.

=== Synthetische Spalten ===

Man kann existierende Spalten mittels beliebiger Groovy-Ausdrücke auf neue, "synthetische" Spalten abbilden. Diese "synthetischen" Spalten werden wie andere Spalten behandelt und können insbesondere geplottet  oder zur Gruppierung verwendet werden. 

Eine synthetische Spalte wird erzeugt über "Hauptmenü->Column->Synthetic column". Es erscheint ein Fenster, in dem ein beliebiger Groovy-Ausdruck angegeben werden kann. Spalten werden über Namen in einfachen Anführungszeichen referenziert, also z.B.:

 'MB/sec'/'threads'

erzeugt eine Spalte mit Durchsatz pro I/O-Thread.

Leider ist es derzeit noch so, daß das Anlegen einer synthetischen Spalte die bisherigen Reihenfolge der Spalten auf die Ursprungsreihenfolge zurücksetzt. Das ist lästig und wird irgendwann behoben.

== Umgang mit Zeilen ==

=== Zeilenfilterung ===

Zeilenfilterung hilft, Abhängigkeiten zwischen Spalten deutlich zu machen, indem man die "Punktewolke" ausdünnt. Zeilenfilter werden eingerichtet über das Kontextmenü (Rechtsklick) auf eine beliebige Tabellenzelle "-> Only this value" bzw. "-> Exclude this value". Es werden dann alle Zeilen ausgeblendet (und aus den Plots entfernt), deren Zeilen nicht (bzw. genau) diesen Wert in dieser Spalte haben. Es sind mehrere Zeilenfilter pro Spalte (um mehrere Spaltenwerte herauszufiltern) oder auch mehrere Zeilenfilter in unterschiedlichen Spalten gleichzeitig möglich; es werden dann nur Zeilen angezeigt, die alle Zeilenfilterbedingungen erfüllen.

Mit Zeilenfiltern versehene Spalten sind rot markiert.

Mit dem Kontextmenü auf einen Spaltenkopf "-> Remove row filters for this column" werden alle Zeilenfilter für diesen Spaltenkopf entfernt.

== Farben der Spaltenköpfe ==

{| border="1"
 !Vordergrundfarbe!!Hintergrundfarbe!!Bedeutung
 |-
 |Schwarz                 || Weiß                     || Normalzustand
 |-
 |Weiß                       || Schwarz               || Spalte wird geplottet
 |-
 |Schwarz                 || Rot                        || Zeilenfilter aktiv in der Spalte
 |-
 |Schwarz                 || Gelb                      || Gruppierungsspalte
 |-
 |Schwarz                 || Orange                 || Zeilenfilter aktiv in der Spalte und ist Gruppierungsspalte
 |-
 |Rot                          || Schwarz               || Spalte wird geplottet und Zeilenfilter ist aktiv in der Spalte
 |-
 |Gelb                        || Schwarz               || Spalte wird geplottet und ist Gruppierungsspalte
 |-
 |Orange                   || Schwarz               || Spalte wird geplottet, Zeilenfilter ist aktiv und ist Gruppierungsspalte
|}

= Known Bugs =

* Verschieben von Spalten erzeugt "manchmal" Stack-Traces, die aber harmlos sind
* Hinzufügen einer neuen Spalte (Synthetische Spalte) setzt die Spaltenordnung auf die ursprüngliche zurück, was nervig ist.

= Featurewünsche =

* Zoom in Plotfenstern
* Selektierte Zeilen in der Tabelle sollten in den Plots hervorgehoben werden, um bestimmte Punkte leichter identifizieren zu können.
* Mehr Beschriftungen in den Plots bzgl. Filter, Datasets etc.

= Vdbench-Konfiguration =

Ich verwende gerne folgendes Skript für die Vdbench-Läufe, zu starten aus dem vdbench-Verzeichnis. Als Argument nimmt es ein Raw-Volumne. Vor dem Lauf des Vdbench zwingt das Skript zur Angabe der aktuellen Konfiguration und speichert diese in einer Datei setup.txt ab. Es macht Sinn, die Beschreibung so ausführlich wie möglich zu halten, um die Vergleichbarkeit der Läufe mit anderen zu ermöglichen.

<pre>
macbook:customer jf$ cat vdbench.sh
dev=$1

dir=`echo $dev | tr '/' '_'`.`date +'%Y%m%d%H%M%S'`
mkdir -p results/$dir
echo Beschreibe System:
vi results/$dir/setup.txt

workfile=/tmp/vdbench.sh.$$
cat <<EOF > $workfile
sd=sd1,lun=$dev,size=10g

wd=sequential_write,sd=sd1,rdpct=0,seekpct=sequential
wd=sequential_read,sd=sd1,rdpct=100,seekpct=sequential
wd=random_write,sd=sd1,rdpct=0,seekpct=random
wd=random_read,sd=sd1,rdpct=100,seekpct=random
wd=random_write_read,sd=sd1,rdpct=50,seekpct=random
rd=random_write_max,wd=random_write,iorate=max,elapsed=10,interval=1,forthreads=(1-16,d),forxfersize=(4k,8k,16k,64k,256k)
rd=random_read_max,wd=random_read,iorate=max,elapsed=10,interval=1,forthreads=(1-16,d),forxfersize=(4k,8k,16k,64k,256k)
rd=sequential_write_max,wd=sequential_write,iorate=max,elapsed=10,interval=1,forthreads=(1-16,d),forxfersize=(4k,8k,16k,64k,256k)
rd=sequential_read_max,wd=sequential_read,iorate=max,elapsed=10,interval=1,forthreads=(1-16,d),forxfersize=(4k,8k,16k,64k,256k)
EOF
./vdbench -o results/$dir -f $workfile
rm -f $workfile

</pre>

